# ワークフローファイル: .github/workflows/generate-tiles.yml
name: Generate Vector Tiles

on:
  push:
    paths:
      - 'source/**'
      - 'config/**'
  workflow_dispatch:
    inputs:
      is_production:
        description: 'Production build (if false, creates test build)'
        required: true
        type: boolean
        default: false

env:
  TIMESTAMP: $(date +'%Y%m%d_%H%M%S')

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup GDAL
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin python3-pip
          pip3 install pandas pyyaml

      - name: Setup tippecanoe
        run: |
          git clone https://github.com/felt/tippecanoe.git
          cd tippecanoe
          make -j
          sudo make install

      - name: Create directory structure
        run: |
          mkdir -p processed
          mkdir -p _site

      - name: Set timestamp
        run: |
          echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV

      - name: Merge GeoJSON and FlatGeobuf files
        run: |
          mkdir -p processed/normalized
          
          # GeoJSONとFGBファイルを両方MULTIPOLYGONとして変換
          for file in source/*.{geojson,fgb}; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              extension="${filename##*.}"
              basename="${filename%.*}"
              
              ogr2ogr -f FlatGeobuf \
                -nlt MULTIPOLYGON \
                "processed/normalized/${basename}_normalized.fgb" \
                "$file"
            fi
          done
          
          # 変換済みのFGBファイルを結合
          python3 $(which ogrmerge.py) -single \
            -f FlatGeobuf \
            -o processed/merged.fgb \
            -progress \
            processed/normalized/*.fgb || echo "No source files found"

      - name: Rename attributes if list.csv exists
        run: |
          if [ -f "source/list.csv" ]; then
            python3 - << 'EOF'
          import pandas as pd
          import subprocess
          import os
          
          # CSVファイルの読み込み
          rename_df = pd.read_csv('source/list.csv', header=0)
          
          # SQLクエリの構築
          select_parts = []
          for _, row in rename_df.iterrows():
              old_name = row.iloc[0]
              new_name = row.iloc[1]
              select_parts.append(f"{old_name} as {new_name}")
          
          # 変更対象外の属性を取得
          output = subprocess.check_output(['ogrinfo', '-so', 'processed/merged.fgb']).decode('utf-8')
          all_fields = []
          for line in output.split('\n'):
              if ': ' in line and not line.startswith('INFO'):
                  field_name = line.split(':')[0].strip()
                  all_fields.append(field_name)
          
          # 変更対象外の属性をそのまま追加
          old_names = rename_df.iloc[:, 0].tolist()
          unchanged_fields = [f for f in all_fields if f not in old_names]
          select_parts.extend(unchanged_fields)
          
          # SQL文の作成
          sql = f"SELECT geometry, {', '.join(select_parts)} FROM merged"
          
          # 属性名変更済みのFlatGeobufファイルを作成
          subprocess.run([
              'ogr2ogr',
              '-f', 'FlatGeobuf',
              'processed/merged_renamed.fgb',
              'processed/merged.fgb',
              '-dialect', 'sqlite',
              '-sql', sql,
              '-nln', 'merged'
          ])
          
          # 元のファイルを置き換え
          os.replace('processed/merged_renamed.fgb', 'processed/merged.fgb')
          EOF
          fi

      - name: Generate tiles
        run: |
          python3 - << 'EOF'
          import yaml
          import subprocess
          import os
          import sys
          
          def create_dissolved_layer(input_file, output_file, group_fields, layer_name):
              # グループ化フィールドをカンマ区切りの文字列に変換
              group_fields_str = ', '.join(group_fields)
              
              # SQLクエリの構築
              sql = f"""
                  SELECT ST_Union(geometry) as geometry, {group_fields_str}
                  FROM merged
                  GROUP BY {group_fields_str}
              """
              
              # ogr2ogrでディゾルブを実行
              subprocess.run([
                  'ogr2ogr',
                  '-f', 'FlatGeobuf',
                  output_file,
                  input_file,
                  '-dialect', 'sqlite',
                  '-sql', sql
              ], check=True)
              
              return output_file
          
          def generate_tile_layer(input_file, output_dir, layer_name, min_zoom, max_zoom, options=None):
              # 基本的なtippecanoeオプション
              tippecanoe_cmd = [
                  'tippecanoe',
                  '-e', output_dir,
                  '--no-tile-compression',
                  f'-z{max_zoom}', f'-Z{min_zoom}',
                  '--no-tile-size-limit',
                  '--no-feature-limit',
                  '-l', layer_name
              ]
              
              # 追加オプションがある場合は追加
              if options:
                  if options.get('detect_shared_borders', False):
                      tippecanoe_cmd.extend(['--detect-shared-borders'])
                  if options.get('no_simplification_shared_nodes', False):
                      tippecanoe_cmd.extend(['--no-simplification-of-shared-nodes'])
              
              tippecanoe_cmd.append(input_file)
              
              # tippecanoeを実行
              subprocess.run(tippecanoe_cmd, check=True)
          
          # 設定ファイルの読み込み
          try:
              with open('config/tiles.yml', 'r') as f:
                  config = yaml.safe_load(f)
          except FileNotFoundError:
              print("Error: tiles.yml configuration file not found")
              sys.exit(1)
          
          # 出力ディレクトリの設定
          base_tiles_dir = "processed/tiles"
          os.makedirs(base_tiles_dir, exist_ok=True)
          
          # 各レイヤーの生成
          for layer in config['layers']:
              layer_name = layer['name']
              zoom_levels = layer['zoom_levels']
              temp_dir = f"{base_tiles_dir}/{layer_name}_temp"
              os.makedirs(temp_dir, exist_ok=True)
              
              input_file = 'processed/merged.fgb'
              
              # ディゾルブが必要な場合は実行
              if 'dissolve_fields' in layer:
                  dissolved_file = f"processed/merged_{layer_name}_dissolved.fgb"
                  input_file = create_dissolved_layer(
                      'processed/merged.fgb',
                      dissolved_file,
                      layer['dissolve_fields'],
                      layer_name
                  )
              
              # タイル生成
              generate_tile_layer(
                  input_file,
                  temp_dir,
                  layer_name,
                  zoom_levels['min'],
                  zoom_levels['max'],
                  layer.get('options', {})
              )
          
          # タイルの統合
          final_tiles_dir = f"{base_tiles_dir}/combined"
          os.makedirs(final_tiles_dir, exist_ok=True)
          
          # 各レイヤーのタイルを統合
          for layer in config['layers']:
              layer_name = layer['name']
              temp_dir = f"{base_tiles_dir}/{layer_name}_temp"
              # ディレクトリ内のすべてのファイルとディレクトリをコピー
              for item in os.listdir(temp_dir):
                  src = os.path.join(temp_dir, item)
                  dst = os.path.join(final_tiles_dir, item)
                  if os.path.isdir(src):
                      subprocess.run(['cp', '-r', src, dst], check=True)
                  else:
                      subprocess.run(['cp', src, dst], check=True)
          
          # 一時ディレクトリの削除
          for layer in config['layers']:
              layer_name = layer['name']
              temp_dir = f"{base_tiles_dir}/{layer_name}_temp"
              subprocess.run(['rm', '-rf', temp_dir], check=True)
          
          # 最終的なタイルディレクトリを移動
          subprocess.run(['rm', '-rf', f"{base_tiles_dir}/tiles"], check=True)
          subprocess.run(['mv', final_tiles_dir, f"{base_tiles_dir}/tiles"], check=True)
          
          # タイルサイズの分析
          with open(f"{base_tiles_dir}/tile_sizes.csv", 'w') as f:
              f.write("zoom_level,max_size_bytes\n")
              for zoom_dir in os.listdir(f"{base_tiles_dir}/tiles"):
                  zoom_path = os.path.join(f"{base_tiles_dir}/tiles", zoom_dir)
                  if os.path.isdir(zoom_path):
                      # 最大ファイルサイズを取得
                      result = subprocess.run(
                          ['find', zoom_path, '-type', 'f', '-name', '*.pbf', '-printf', '%s\n'],
                          capture_output=True,
                          text=True
                      )
                      if result.stdout:
                          max_size = max(map(int, result.stdout.strip().split('\n')))
                          f.write(f"{zoom_dir},{max_size}\n")
          EOF

      - name: Copy tiles to destination
        run: |
          if [ "${{ github.event.inputs.is_production }}" = "true" ]; then
            # 本番用: tilesディレクトリにコピー
            rm -rf "tiles"
            mkdir -p "tiles"
            cp -r processed/tiles/tiles/* "tiles/"
            cp processed/tiles/tile_sizes.csv "tiles/"
            
            # GitHub Pages用（既存の_siteディレクトリを空にする）
            rm -rf "_site"/*
            mkdir -p "_site/tiles"
            cp -r processed/tiles/tiles/* "_site/tiles/"
            cp processed/tiles/tile_sizes.csv "_site/tiles/"
          else
            # テスト用: タイムスタンプ付きディレクトリにコピー
            TEST_DIR="${{ env.TIMESTAMP }}-tiles"
            mkdir -p "$TEST_DIR"
            cp -r processed/tiles/tiles/* "$TEST_DIR/"
            cp processed/tiles/tile_sizes.csv "$TEST_DIR/"
            
            # GitHub Pages用
            mkdir -p "_site/$TEST_DIR"
            cp -r processed/tiles/tiles/* "_site/$TEST_DIR/"
            cp processed/tiles/tile_sizes.csv "_site/$TEST_DIR/"
          fi

      - name: Generate index page
        run: |
          # Create base HTML structure
          cat > _site/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Vector Tiles Hosting</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .tile-list { margin: 20px 0; }
              .tile-entry { 
                margin: 10px 0;
                padding: 10px;
                background-color: #f5f5f5;
                border-radius: 4px;
              }
              .production { border-left: 4px solid #4CAF50; }
              .test { border-left: 4px solid #2196F3; }
              code { 
                background-color: #e0e0e0;
                padding: 2px 4px;
                border-radius: 3px;
              }
              .timestamp {
                color: #666;
                font-size: 0.9em;
              }
              .metadata {
                margin-top: 5px;
                font-size: 0.9em;
              }
              .metadata a {
                color: #2196F3;
                text-decoration: none;
              }
              .metadata a:hover {
                text-decoration: underline;
              }
            </style>
          </head>
          <body>
            <h1>Vector Tiles Hosting</h1>
          EOF

          # 全てのタイルセットを一覧表示する関数
          list_tile_directories() {
            for dir in "$1"/*/ ; do
              if [ -d "$dir" ]; then
                dir_name=$(basename "$dir")
                
                # タイルセットの種類を判断（本番用 or テスト用）
                if [ "$dir_name" = "tiles" ]; then
                  entry_class="production"
                  title="Production Tiles"
                  url_path="tiles"
                else
                  entry_class="test"
                  title="Test Build"
                  url_path="$dir_name"
                fi
                
                # タイルセット情報を表示
                cat >> _site/index.html << EOF
                <div class="tile-entry ${entry_class}">
                  <p><strong>${title}</strong>
                    $([ "$dir_name" != "tiles" ] && echo "<span class=\"timestamp\">(${dir_name%%-tiles})</span>")
                  </p>
                  <p>URL: <code>https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/}/${url_path}/{z}/{x}/{y}.pbf</code></p>
                  <p class="metadata">
                    <a href="${url_path}/tile_sizes.csv">Download tile size analysis (CSV)</a>
                  </p>
                </div>
          EOF
              fi
            done
          }

          # タイルセットの一覧を生成
          cat >> _site/index.html << EOF
          <div class="tile-list">
          EOF
          
          list_tile_directories "_site"
          
          # Close HTML structure
          cat >> _site/index.html << EOF
          </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if [ "${{ github.event.inputs.is_production }}" = "true" ]; then
            git add tiles/
            git add tiles/tile_sizes.csv
          else
            git add "${{ env.TIMESTAMP }}-tiles/"
            git add "${{ env.TIMESTAMP }}-tiles/tile_sizes.csv"
          fi
          
          COMMIT_MSG="Update vector tiles - ${{ env.TIMESTAMP }}"
          
          if [ "${{ github.event.inputs.is_production }}" = "true" ]; then
            COMMIT_MSG="${COMMIT_MSG} (Production Build)"
          else
            COMMIT_MSG="${COMMIT_MSG} (Test Build)"
          fi
          
          git commit -m "${COMMIT_MSG}" || echo "No changes to commit"
          git push || echo "No changes to push"
